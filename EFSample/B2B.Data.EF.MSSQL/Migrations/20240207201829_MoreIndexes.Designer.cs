// <auto-generated />
using System;
using B2B.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B2B.Data.EF.Migrations
{
    [DbContext(typeof(B2BDbContext))]
    [Migration("20240207201829_MoreIndexes")]
    partial class MoreIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("B2B.Objects.Entities.Banking.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Banks", "Banking");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("BankBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BankBranchId");

                    b.ToTable("BankAccounts", "Banking");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.BankBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BankId");

                    b.ToTable("BankBranches", "Banking");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.Payee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentText")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("Payees", "Banking");
                });

            modelBuilder.Entity("B2B.Objects.Entities.CreditCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("CompanyReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Perspective")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyReferenceId");

                    b.HasIndex("CreditId");

                    b.ToTable("CreditCompanies", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.CreditLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFundable")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("LinePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CreditId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CreditLines", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.CreditReference", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreditId");

                    b.HasIndex("SystemId");

                    b.ToTable("CreditReferences", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.FundingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CurrentLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunderReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FundingTypeBucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSystematic")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FundingTypeBucketId");

                    b.HasIndex("SystemId");

                    b.ToTable("FundingDetails", "Finance");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CaptureDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("CreditorAcceptanceRule")
                        .HasColumnType("bit");

                    b.Property<string>("CreditorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreditorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreditorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("DebtorAcceptanceRule")
                        .HasColumnType("bit");

                    b.Property<string>("DebtorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DebtorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("DebtorPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EarliestRelatedTaxPoint")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("FundableValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("FunderAcceptanceRule")
                        .HasColumnType("bit");

                    b.Property<string>("FunderExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FunderName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FunderState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("IssueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SourceSystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TransactionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceSystemId");

                    b.ToTable("Offers", "Finance");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("CompanyReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Perspective")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyReferenceId");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferCompanies", "Finance");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferDataItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferDataItems", "Finance");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreditReferenceId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("FundableValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceReferenceId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("LinePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CreditReferenceId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceReferenceId");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferLines", "Finance");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferReference", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("SystemId");

                    b.ToTable("OfferReferences", "Finance");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AppliesFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Rates", "Finance");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Import.CompanyCSVLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCountryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPoBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTownOrCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressZipOrPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalTax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Perspective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ProcessedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProcessingState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceSeperator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("RootBucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceSystemId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RootBucketId");

                    b.ToTable("CompanyCSVLines", "Import");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Import.TransactionCSVLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AlsoPayOffer")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditorTransactionRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DebtorRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DueDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFundable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRaLine")
                        .HasColumnType("bit");

                    b.Property<string>("PayRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ProcessedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProcessingState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceSeperator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("RelatedTransactionRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RootBucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceSystemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VATRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RootBucketId");

                    b.ToTable("TransactionCSVLines", "Import");
                });

            modelBuilder.Entity("B2B.Objects.Entities.InvoiceCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("CompanyReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Perspective")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyReferenceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceCompanies", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.InvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFundable")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("LinePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceLines", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.InvoiceReference", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SystemId");

                    b.ToTable("InvoiceReferences", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.AuditItemLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AuditItemLevels", "Logging");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fatal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Error"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Warning"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Success"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Info"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Debug"
                        });
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.CreditAuditItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuditItemLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuditItemLevelId");

                    b.HasIndex("CreditId");

                    b.HasIndex("UserId");

                    b.ToTable("CreditAuditItems", "Logging");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.InvoiceAuditItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuditItemLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuditItemLevelId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceAuditItems", "Logging");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.OfferAuditItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuditItemLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuditItemLevelId");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("OfferAuditItems", "Logging");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.PurchaseOrderAuditItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuditItemLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuditItemLevelId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseOrderAuditItems", "Logging");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.RemittanceAdviceAuditItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuditItemLevelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RemittanceAdviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuditItemLevelId");

                    b.HasIndex("RemittanceAdviceId");

                    b.HasIndex("UserId");

                    b.ToTable("RemittanceAdviceAuditItems", "Logging");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Line1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Line2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PoBox")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StateOrProvince")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TownOrCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipOrPostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Buckets", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketActiveTransaction", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveTransactionId")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BucketId", "ActiveTransactionId");

                    b.HasIndex("ActiveTransactionId");

                    b.HasIndex("BucketId");

                    b.ToTable("BucketActiveTransactions", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketBankAccount", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "BankAccountId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BucketBankAccounts", "Banking");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketCompany", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "CompanyId");

                    b.HasIndex("BucketId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BucketCompanies", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketCredit", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "CreditId");

                    b.HasIndex("BucketId");

                    b.HasIndex("CreditId");

                    b.ToTable("BucketCredits", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketInvoice", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "InvoiceId");

                    b.HasIndex("BucketId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("BucketInvoices", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketOffer", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "OfferId");

                    b.HasIndex("BucketId");

                    b.HasIndex("OfferId");

                    b.ToTable("BucketOffers", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketPayee", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "PayeeId");

                    b.HasIndex("BucketId");

                    b.HasIndex("PayeeId");

                    b.ToTable("BucketPayees", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketPurchaseOrder", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "PurchaseOrderId");

                    b.HasIndex("BucketId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("BucketPurchaseOrders", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketRemittanceAdvice", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RemittanceAdviceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "RemittanceAdviceId");

                    b.HasIndex("BucketId");

                    b.HasIndex("RemittanceAdviceId");

                    b.ToTable("BucketRemittanceAdvices", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketRole", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BucketId", "RoleId");

                    b.HasIndex("BucketId");

                    b.HasIndex("RoleId");

                    b.ToTable("BucketRoles", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketSystem", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BucketId", "SystemId");

                    b.HasIndex("BucketId");

                    b.HasIndex("SystemId");

                    b.ToTable("BucketSystems", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketUser", b =>
                {
                    b.Property<Guid>("BucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BucketId", "UserId");

                    b.HasIndex("BucketId");

                    b.HasIndex("UserId");

                    b.ToTable("BucketUsers", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateTradingEnabled")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Companies", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.CompanyPayee", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId", "PayeeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PayeeId");

                    b.ToTable("CompanyPayees", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.CompanyReference", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SystemId");

                    b.ToTable("CompanyReferences", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InEuropeanUnion")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "Masterdata");

                    b.HasData(
                        new
                        {
                            Id = "",
                            InEuropeanUnion = false,
                            Name = "UNKNOWN"
                        },
                        new
                        {
                            Id = "AF",
                            InEuropeanUnion = false,
                            Name = "AFGHANISTAN"
                        },
                        new
                        {
                            Id = "AX",
                            InEuropeanUnion = false,
                            Name = "ÅLAND ISLANDS"
                        },
                        new
                        {
                            Id = "AL",
                            InEuropeanUnion = false,
                            Name = "ALBANIA"
                        },
                        new
                        {
                            Id = "DZ",
                            InEuropeanUnion = false,
                            Name = "ALGERIA"
                        },
                        new
                        {
                            Id = "AS",
                            InEuropeanUnion = false,
                            Name = "AMERICAN SAMOA"
                        },
                        new
                        {
                            Id = "AD",
                            InEuropeanUnion = false,
                            Name = "ANDORRA"
                        },
                        new
                        {
                            Id = "AO",
                            InEuropeanUnion = false,
                            Name = "ANGOLA"
                        },
                        new
                        {
                            Id = "AI",
                            InEuropeanUnion = false,
                            Name = "ANGUILLA"
                        },
                        new
                        {
                            Id = "AQ",
                            InEuropeanUnion = false,
                            Name = "ANTARCTICA"
                        },
                        new
                        {
                            Id = "AG",
                            InEuropeanUnion = false,
                            Name = "ANTIGUA AND BARBUDA"
                        },
                        new
                        {
                            Id = "AR",
                            InEuropeanUnion = false,
                            Name = "ARGENTINA"
                        },
                        new
                        {
                            Id = "AM",
                            InEuropeanUnion = false,
                            Name = "ARMENIA"
                        },
                        new
                        {
                            Id = "AW",
                            InEuropeanUnion = false,
                            Name = "ARUBA"
                        },
                        new
                        {
                            Id = "AU",
                            InEuropeanUnion = false,
                            Name = "AUSTRALIA"
                        },
                        new
                        {
                            Id = "AT",
                            InEuropeanUnion = true,
                            Name = "AUSTRIA"
                        },
                        new
                        {
                            Id = "AZ",
                            InEuropeanUnion = false,
                            Name = "AZERBAIJAN"
                        },
                        new
                        {
                            Id = "BS",
                            InEuropeanUnion = false,
                            Name = "BAHAMAS"
                        },
                        new
                        {
                            Id = "BH",
                            InEuropeanUnion = false,
                            Name = "BAHRAIN"
                        },
                        new
                        {
                            Id = "BD",
                            InEuropeanUnion = false,
                            Name = "BANGLADESH"
                        },
                        new
                        {
                            Id = "BB",
                            InEuropeanUnion = false,
                            Name = "BARBADOS"
                        },
                        new
                        {
                            Id = "BY",
                            InEuropeanUnion = false,
                            Name = "BELARUS"
                        },
                        new
                        {
                            Id = "BE",
                            InEuropeanUnion = false,
                            Name = "BELGIUM"
                        },
                        new
                        {
                            Id = "BZ",
                            InEuropeanUnion = false,
                            Name = "BELIZE"
                        },
                        new
                        {
                            Id = "BJ",
                            InEuropeanUnion = false,
                            Name = "BENIN"
                        },
                        new
                        {
                            Id = "BM",
                            InEuropeanUnion = false,
                            Name = "BERMUDA"
                        },
                        new
                        {
                            Id = "BT",
                            InEuropeanUnion = false,
                            Name = "BHUTAN"
                        },
                        new
                        {
                            Id = "BO",
                            InEuropeanUnion = false,
                            Name = "BOLIVIA"
                        },
                        new
                        {
                            Id = "BA",
                            InEuropeanUnion = false,
                            Name = "BOSNIA AND HERZEGOVINA"
                        },
                        new
                        {
                            Id = "BW",
                            InEuropeanUnion = false,
                            Name = "BOTSWANA"
                        },
                        new
                        {
                            Id = "BV",
                            InEuropeanUnion = false,
                            Name = "BOUVET ISLAND"
                        },
                        new
                        {
                            Id = "BR",
                            InEuropeanUnion = false,
                            Name = "BRAZIL"
                        },
                        new
                        {
                            Id = "IO",
                            InEuropeanUnion = false,
                            Name = "BRITISH INDIAN OCEAN TERRITORY"
                        },
                        new
                        {
                            Id = "BN",
                            InEuropeanUnion = false,
                            Name = "BRUNEI DARUSSALAM"
                        },
                        new
                        {
                            Id = "BG",
                            InEuropeanUnion = true,
                            Name = "BULGARIA"
                        },
                        new
                        {
                            Id = "BF",
                            InEuropeanUnion = true,
                            Name = "BURKINA FASO"
                        },
                        new
                        {
                            Id = "BI",
                            InEuropeanUnion = false,
                            Name = "BURUNDI"
                        },
                        new
                        {
                            Id = "KH",
                            InEuropeanUnion = false,
                            Name = "CAMBODIA"
                        },
                        new
                        {
                            Id = "CM",
                            InEuropeanUnion = false,
                            Name = "CAMEROON"
                        },
                        new
                        {
                            Id = "CA",
                            InEuropeanUnion = false,
                            Name = "CANADA"
                        },
                        new
                        {
                            Id = "CV",
                            InEuropeanUnion = false,
                            Name = "CAPE VERDE"
                        },
                        new
                        {
                            Id = "KY",
                            InEuropeanUnion = false,
                            Name = "CAYMAN ISLANDS"
                        },
                        new
                        {
                            Id = "CF",
                            InEuropeanUnion = false,
                            Name = "CENTRAL AFRICAN REPUBLIC"
                        },
                        new
                        {
                            Id = "TD",
                            InEuropeanUnion = false,
                            Name = "CHAD"
                        },
                        new
                        {
                            Id = "CL",
                            InEuropeanUnion = false,
                            Name = "CHILE"
                        },
                        new
                        {
                            Id = "CN",
                            InEuropeanUnion = false,
                            Name = "CHINA"
                        },
                        new
                        {
                            Id = "CX",
                            InEuropeanUnion = false,
                            Name = "CHRISTMAS ISLAND"
                        },
                        new
                        {
                            Id = "CC",
                            InEuropeanUnion = false,
                            Name = "COCOS (KEELING) ISLANDS"
                        },
                        new
                        {
                            Id = "CO",
                            InEuropeanUnion = false,
                            Name = "COLOMBIA"
                        },
                        new
                        {
                            Id = "KM",
                            InEuropeanUnion = false,
                            Name = "COMOROS"
                        },
                        new
                        {
                            Id = "CG",
                            InEuropeanUnion = false,
                            Name = "CONGO"
                        },
                        new
                        {
                            Id = "CD",
                            InEuropeanUnion = false,
                            Name = "CONGO, DEMOCRATIC REPUBLIC OF"
                        },
                        new
                        {
                            Id = "CK",
                            InEuropeanUnion = false,
                            Name = "COOK ISLANDS"
                        },
                        new
                        {
                            Id = "CR",
                            InEuropeanUnion = false,
                            Name = "COSTA RICA"
                        },
                        new
                        {
                            Id = "CI",
                            InEuropeanUnion = false,
                            Name = "COTE D'IVOIRE"
                        },
                        new
                        {
                            Id = "HR",
                            InEuropeanUnion = false,
                            Name = "CROATIA"
                        },
                        new
                        {
                            Id = "CU",
                            InEuropeanUnion = false,
                            Name = "CUBA"
                        },
                        new
                        {
                            Id = "CY",
                            InEuropeanUnion = true,
                            Name = "CYPRUS"
                        },
                        new
                        {
                            Id = "CZ",
                            InEuropeanUnion = true,
                            Name = "CZECH REPUBLIC"
                        },
                        new
                        {
                            Id = "DK",
                            InEuropeanUnion = true,
                            Name = "DENMARK"
                        },
                        new
                        {
                            Id = "DJ",
                            InEuropeanUnion = false,
                            Name = "DJIBOUTI"
                        },
                        new
                        {
                            Id = "DM",
                            InEuropeanUnion = false,
                            Name = "DOMINICA"
                        },
                        new
                        {
                            Id = "DO",
                            InEuropeanUnion = false,
                            Name = "DOMINICAN REPUBLIC"
                        },
                        new
                        {
                            Id = "EC",
                            InEuropeanUnion = false,
                            Name = "ECUADOR"
                        },
                        new
                        {
                            Id = "EG",
                            InEuropeanUnion = false,
                            Name = "EGYPT"
                        },
                        new
                        {
                            Id = "SV",
                            InEuropeanUnion = false,
                            Name = "EL SALVADOR"
                        },
                        new
                        {
                            Id = "GQ",
                            InEuropeanUnion = false,
                            Name = "EQUATORIAL GUINEA"
                        },
                        new
                        {
                            Id = "ER",
                            InEuropeanUnion = false,
                            Name = "ERITREA"
                        },
                        new
                        {
                            Id = "EE",
                            InEuropeanUnion = true,
                            Name = "ESTONIA"
                        },
                        new
                        {
                            Id = "ET",
                            InEuropeanUnion = false,
                            Name = "ETHIOPIA"
                        },
                        new
                        {
                            Id = "FK",
                            InEuropeanUnion = false,
                            Name = "FALKLAND ISLANDS (MALVINAS)"
                        },
                        new
                        {
                            Id = "FO",
                            InEuropeanUnion = false,
                            Name = "FAROE ISLANDS"
                        },
                        new
                        {
                            Id = "FJ",
                            InEuropeanUnion = false,
                            Name = "FIJI"
                        },
                        new
                        {
                            Id = "FI",
                            InEuropeanUnion = true,
                            Name = "FINLAND"
                        },
                        new
                        {
                            Id = "FR",
                            InEuropeanUnion = true,
                            Name = "FRANCE"
                        },
                        new
                        {
                            Id = "GF",
                            InEuropeanUnion = false,
                            Name = "FRENCH GUIANA"
                        },
                        new
                        {
                            Id = "PF",
                            InEuropeanUnion = false,
                            Name = "FRENCH POLYNESIA"
                        },
                        new
                        {
                            Id = "TF",
                            InEuropeanUnion = false,
                            Name = "FRENCH SOUTHERN TERRITORIES"
                        },
                        new
                        {
                            Id = "GA",
                            InEuropeanUnion = false,
                            Name = "GABON"
                        },
                        new
                        {
                            Id = "GM",
                            InEuropeanUnion = false,
                            Name = "GAMBIA"
                        },
                        new
                        {
                            Id = "GE",
                            InEuropeanUnion = false,
                            Name = "GEORGIA"
                        },
                        new
                        {
                            Id = "GG",
                            InEuropeanUnion = false,
                            Name = "GUERNSEY"
                        },
                        new
                        {
                            Id = "JE",
                            InEuropeanUnion = false,
                            Name = "JERSEY"
                        },
                        new
                        {
                            Id = "IM",
                            InEuropeanUnion = false,
                            Name = "ISLE OF MAN"
                        },
                        new
                        {
                            Id = "DE",
                            InEuropeanUnion = true,
                            Name = "GERMANY"
                        },
                        new
                        {
                            Id = "GH",
                            InEuropeanUnion = false,
                            Name = "GHANA"
                        },
                        new
                        {
                            Id = "GI",
                            InEuropeanUnion = false,
                            Name = "GIBRALTAR"
                        },
                        new
                        {
                            Id = "GR",
                            InEuropeanUnion = true,
                            Name = "GREECE"
                        },
                        new
                        {
                            Id = "GL",
                            InEuropeanUnion = false,
                            Name = "GREENLAND"
                        },
                        new
                        {
                            Id = "GD",
                            InEuropeanUnion = false,
                            Name = "GRENADA"
                        },
                        new
                        {
                            Id = "GP",
                            InEuropeanUnion = false,
                            Name = "GUADELOUPE"
                        },
                        new
                        {
                            Id = "GU",
                            InEuropeanUnion = false,
                            Name = "GUAM"
                        },
                        new
                        {
                            Id = "GT",
                            InEuropeanUnion = false,
                            Name = "GUATEMALA"
                        },
                        new
                        {
                            Id = "GN",
                            InEuropeanUnion = false,
                            Name = "GUINEA"
                        },
                        new
                        {
                            Id = "GW",
                            InEuropeanUnion = false,
                            Name = "GUINEA-BISSAU"
                        },
                        new
                        {
                            Id = "GY",
                            InEuropeanUnion = false,
                            Name = "GUYANA"
                        },
                        new
                        {
                            Id = "HT",
                            InEuropeanUnion = false,
                            Name = "HAITI"
                        },
                        new
                        {
                            Id = "HM",
                            InEuropeanUnion = false,
                            Name = "HEARD ISLAND AND MCDONALD ISLANDS"
                        },
                        new
                        {
                            Id = "VA",
                            InEuropeanUnion = false,
                            Name = "HOLY SEE (VATICAN CITY STATE) "
                        },
                        new
                        {
                            Id = "HN",
                            InEuropeanUnion = false,
                            Name = "HONDURAS"
                        },
                        new
                        {
                            Id = "HK",
                            InEuropeanUnion = false,
                            Name = "HONG KONG"
                        },
                        new
                        {
                            Id = "HU",
                            InEuropeanUnion = true,
                            Name = "HUNGARY"
                        },
                        new
                        {
                            Id = "IS",
                            InEuropeanUnion = false,
                            Name = "ICELAND"
                        },
                        new
                        {
                            Id = "IN",
                            InEuropeanUnion = false,
                            Name = "INDIA"
                        },
                        new
                        {
                            Id = "ID",
                            InEuropeanUnion = false,
                            Name = "INDONESIA"
                        },
                        new
                        {
                            Id = "IR",
                            InEuropeanUnion = false,
                            Name = "IRAN, ISLAMIC REPUBLIC OF"
                        },
                        new
                        {
                            Id = "IQ",
                            InEuropeanUnion = false,
                            Name = "IRAQ"
                        },
                        new
                        {
                            Id = "IE",
                            InEuropeanUnion = true,
                            Name = "IRELAND"
                        },
                        new
                        {
                            Id = "IL",
                            InEuropeanUnion = false,
                            Name = "ISRAEL"
                        },
                        new
                        {
                            Id = "IT",
                            InEuropeanUnion = true,
                            Name = "ITALY"
                        },
                        new
                        {
                            Id = "JM",
                            InEuropeanUnion = false,
                            Name = "JAMAICA"
                        },
                        new
                        {
                            Id = "JP",
                            InEuropeanUnion = false,
                            Name = "JAPAN"
                        },
                        new
                        {
                            Id = "JO",
                            InEuropeanUnion = false,
                            Name = "JORDAN"
                        },
                        new
                        {
                            Id = "KZ",
                            InEuropeanUnion = false,
                            Name = "KAZAKHSTAN"
                        },
                        new
                        {
                            Id = "KE",
                            InEuropeanUnion = false,
                            Name = "KENYA"
                        },
                        new
                        {
                            Id = "KI",
                            InEuropeanUnion = false,
                            Name = "KIRIBATI"
                        },
                        new
                        {
                            Id = "KP",
                            InEuropeanUnion = false,
                            Name = "KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF"
                        },
                        new
                        {
                            Id = "KR",
                            InEuropeanUnion = false,
                            Name = "KOREA, REPUBLIC OF"
                        },
                        new
                        {
                            Id = "KW",
                            InEuropeanUnion = false,
                            Name = "KUWAIT"
                        },
                        new
                        {
                            Id = "KG",
                            InEuropeanUnion = false,
                            Name = "KYRGYZSTAN"
                        },
                        new
                        {
                            Id = "LA",
                            InEuropeanUnion = false,
                            Name = "LAO PEOPLE'S DEMOCRATIC REPUBLIC"
                        },
                        new
                        {
                            Id = "LV",
                            InEuropeanUnion = true,
                            Name = "LATVIA"
                        },
                        new
                        {
                            Id = "LB",
                            InEuropeanUnion = false,
                            Name = "LEBANON"
                        },
                        new
                        {
                            Id = "LS",
                            InEuropeanUnion = false,
                            Name = "LESOTHO"
                        },
                        new
                        {
                            Id = "LR",
                            InEuropeanUnion = false,
                            Name = "LIBERIA"
                        },
                        new
                        {
                            Id = "LY",
                            InEuropeanUnion = false,
                            Name = "LIBYAN ARAB JAMAHIRIYA"
                        },
                        new
                        {
                            Id = "LI",
                            InEuropeanUnion = false,
                            Name = "LIECHTENSTEIN"
                        },
                        new
                        {
                            Id = "LT",
                            InEuropeanUnion = true,
                            Name = "LITHUANIA"
                        },
                        new
                        {
                            Id = "LU",
                            InEuropeanUnion = true,
                            Name = "LUXEMBOURG"
                        },
                        new
                        {
                            Id = "MO",
                            InEuropeanUnion = false,
                            Name = "MACAO"
                        },
                        new
                        {
                            Id = "MK",
                            InEuropeanUnion = false,
                            Name = "MACEDONIA,FORMER YUGOSLAV REPUBLIC"
                        },
                        new
                        {
                            Id = "MG",
                            InEuropeanUnion = false,
                            Name = "MADAGASCAR"
                        },
                        new
                        {
                            Id = "MW",
                            InEuropeanUnion = false,
                            Name = "MALAWI"
                        },
                        new
                        {
                            Id = "MY",
                            InEuropeanUnion = false,
                            Name = "MALAYSIA"
                        },
                        new
                        {
                            Id = "MV",
                            InEuropeanUnion = false,
                            Name = "MALDIVES"
                        },
                        new
                        {
                            Id = "ML",
                            InEuropeanUnion = false,
                            Name = "MALI"
                        },
                        new
                        {
                            Id = "MT",
                            InEuropeanUnion = true,
                            Name = "MALTA"
                        },
                        new
                        {
                            Id = "MH",
                            InEuropeanUnion = false,
                            Name = "MARSHALL ISLANDS"
                        },
                        new
                        {
                            Id = "MQ",
                            InEuropeanUnion = false,
                            Name = "MARTINIQUE"
                        },
                        new
                        {
                            Id = "MR",
                            InEuropeanUnion = false,
                            Name = "MAURITANIA"
                        },
                        new
                        {
                            Id = "MU",
                            InEuropeanUnion = false,
                            Name = "MAURITIUS"
                        },
                        new
                        {
                            Id = "YT",
                            InEuropeanUnion = false,
                            Name = "MAYOTTE"
                        },
                        new
                        {
                            Id = "MX",
                            InEuropeanUnion = false,
                            Name = "MEXICO"
                        },
                        new
                        {
                            Id = "FM",
                            InEuropeanUnion = false,
                            Name = "MICRONESIA, FEDERATED STATES OF"
                        },
                        new
                        {
                            Id = "MD",
                            InEuropeanUnion = false,
                            Name = "MOLDOVA, REPUBLIC OF"
                        },
                        new
                        {
                            Id = "MC",
                            InEuropeanUnion = false,
                            Name = "MONACO"
                        },
                        new
                        {
                            Id = "ME",
                            InEuropeanUnion = false,
                            Name = "MONTENEGRO"
                        },
                        new
                        {
                            Id = "MN",
                            InEuropeanUnion = false,
                            Name = "MONGOLIA"
                        },
                        new
                        {
                            Id = "MS",
                            InEuropeanUnion = false,
                            Name = "MONTSERRAT"
                        },
                        new
                        {
                            Id = "MA",
                            InEuropeanUnion = false,
                            Name = "MOROCCO"
                        },
                        new
                        {
                            Id = "MZ",
                            InEuropeanUnion = false,
                            Name = "MOZAMBIQUE"
                        },
                        new
                        {
                            Id = "MM",
                            InEuropeanUnion = false,
                            Name = "MYANMAR"
                        },
                        new
                        {
                            Id = "NA",
                            InEuropeanUnion = false,
                            Name = "NAMIBIA"
                        },
                        new
                        {
                            Id = "NR",
                            InEuropeanUnion = false,
                            Name = "NAURU"
                        },
                        new
                        {
                            Id = "NP",
                            InEuropeanUnion = false,
                            Name = "NEPAL"
                        },
                        new
                        {
                            Id = "NL",
                            InEuropeanUnion = true,
                            Name = "NETHERLANDS"
                        },
                        new
                        {
                            Id = "AN",
                            InEuropeanUnion = false,
                            Name = "NETHERLANDS ANTILLES"
                        },
                        new
                        {
                            Id = "NC",
                            InEuropeanUnion = false,
                            Name = "NEW CALEDONIA"
                        },
                        new
                        {
                            Id = "NZ",
                            InEuropeanUnion = false,
                            Name = "NEW ZEALAND"
                        },
                        new
                        {
                            Id = "NI",
                            InEuropeanUnion = false,
                            Name = "NICARAGUA"
                        },
                        new
                        {
                            Id = "NE",
                            InEuropeanUnion = false,
                            Name = "NIGER"
                        },
                        new
                        {
                            Id = "NG",
                            InEuropeanUnion = false,
                            Name = "NIGERIA"
                        },
                        new
                        {
                            Id = "NU",
                            InEuropeanUnion = false,
                            Name = "NIUE"
                        },
                        new
                        {
                            Id = "NF",
                            InEuropeanUnion = false,
                            Name = "NORFOLK ISLAND"
                        },
                        new
                        {
                            Id = "MP",
                            InEuropeanUnion = false,
                            Name = "NORTHERN MARIANA ISLANDS"
                        },
                        new
                        {
                            Id = "NO",
                            InEuropeanUnion = false,
                            Name = "NORWAY"
                        },
                        new
                        {
                            Id = "OM",
                            InEuropeanUnion = false,
                            Name = "OMAN"
                        },
                        new
                        {
                            Id = "PK",
                            InEuropeanUnion = false,
                            Name = "PAKISTAN"
                        },
                        new
                        {
                            Id = "PW",
                            InEuropeanUnion = false,
                            Name = "PALAU"
                        },
                        new
                        {
                            Id = "PS",
                            InEuropeanUnion = false,
                            Name = "PALESTINIAN TERRITORY, OCCUPIED"
                        },
                        new
                        {
                            Id = "PA",
                            InEuropeanUnion = false,
                            Name = "PANAMA"
                        },
                        new
                        {
                            Id = "PG",
                            InEuropeanUnion = false,
                            Name = "PAPUA NEW GUINEA"
                        },
                        new
                        {
                            Id = "PY",
                            InEuropeanUnion = false,
                            Name = "PARAGUAY"
                        },
                        new
                        {
                            Id = "PE",
                            InEuropeanUnion = false,
                            Name = "PERU"
                        },
                        new
                        {
                            Id = "PH",
                            InEuropeanUnion = false,
                            Name = "PHILIPPINES"
                        },
                        new
                        {
                            Id = "PN",
                            InEuropeanUnion = false,
                            Name = "PITCAIRN"
                        },
                        new
                        {
                            Id = "PL",
                            InEuropeanUnion = true,
                            Name = "POLAND"
                        },
                        new
                        {
                            Id = "PT",
                            InEuropeanUnion = true,
                            Name = "PORTUGAL"
                        },
                        new
                        {
                            Id = "PR",
                            InEuropeanUnion = false,
                            Name = "PUERTO RICO"
                        },
                        new
                        {
                            Id = "QA",
                            InEuropeanUnion = false,
                            Name = "QATAR"
                        },
                        new
                        {
                            Id = "RE",
                            InEuropeanUnion = false,
                            Name = "REUNION"
                        },
                        new
                        {
                            Id = "RO",
                            InEuropeanUnion = true,
                            Name = "ROMANIA"
                        },
                        new
                        {
                            Id = "RU",
                            InEuropeanUnion = false,
                            Name = "RUSSIAN FEDERATION"
                        },
                        new
                        {
                            Id = "RW",
                            InEuropeanUnion = false,
                            Name = "RWANDA"
                        },
                        new
                        {
                            Id = "SH",
                            InEuropeanUnion = false,
                            Name = "SAINT HELENA"
                        },
                        new
                        {
                            Id = "KN",
                            InEuropeanUnion = false,
                            Name = "SAINT KITTS AND NEVIS"
                        },
                        new
                        {
                            Id = "LC",
                            InEuropeanUnion = false,
                            Name = "SAINT LUCIA"
                        },
                        new
                        {
                            Id = "PM",
                            InEuropeanUnion = false,
                            Name = "SAINT PIERRE AND MIQUELON"
                        },
                        new
                        {
                            Id = "VC",
                            InEuropeanUnion = false,
                            Name = "SAINT VINCENT AND THE GRENADINES"
                        },
                        new
                        {
                            Id = "WS",
                            InEuropeanUnion = false,
                            Name = "SAMOA"
                        },
                        new
                        {
                            Id = "SM",
                            InEuropeanUnion = false,
                            Name = "SAN MARINO"
                        },
                        new
                        {
                            Id = "ST",
                            InEuropeanUnion = false,
                            Name = "SAO TOME AND PRINCIPE"
                        },
                        new
                        {
                            Id = "SA",
                            InEuropeanUnion = false,
                            Name = "SAUDI ARABIA"
                        },
                        new
                        {
                            Id = "SN",
                            InEuropeanUnion = false,
                            Name = "SENEGAL"
                        },
                        new
                        {
                            Id = "CS",
                            InEuropeanUnion = false,
                            Name = "SERBIA AND MONTENEGRO"
                        },
                        new
                        {
                            Id = "SC",
                            InEuropeanUnion = false,
                            Name = "SEYCHELLES"
                        },
                        new
                        {
                            Id = "SL",
                            InEuropeanUnion = false,
                            Name = "SIERRA LEONE"
                        },
                        new
                        {
                            Id = "SG",
                            InEuropeanUnion = false,
                            Name = "SINGAPORE"
                        },
                        new
                        {
                            Id = "SK",
                            InEuropeanUnion = true,
                            Name = "SLOVAKIA"
                        },
                        new
                        {
                            Id = "SI",
                            InEuropeanUnion = true,
                            Name = "SLOVENIA"
                        },
                        new
                        {
                            Id = "SB",
                            InEuropeanUnion = false,
                            Name = "SOLOMON ISLANDS"
                        },
                        new
                        {
                            Id = "SO",
                            InEuropeanUnion = false,
                            Name = "SOMALIA"
                        },
                        new
                        {
                            Id = "ZA",
                            InEuropeanUnion = false,
                            Name = "SOUTH AFRICA"
                        },
                        new
                        {
                            Id = "GS",
                            InEuropeanUnion = false,
                            Name = "SOUTH GEORGIA & SOUTH SANDWICH ISLANDS"
                        },
                        new
                        {
                            Id = "ES",
                            InEuropeanUnion = true,
                            Name = "SPAIN"
                        },
                        new
                        {
                            Id = "LK",
                            InEuropeanUnion = false,
                            Name = "SRI LANKA"
                        },
                        new
                        {
                            Id = "SD",
                            InEuropeanUnion = false,
                            Name = "SUDAN"
                        },
                        new
                        {
                            Id = "SR",
                            InEuropeanUnion = false,
                            Name = "SURINAME"
                        },
                        new
                        {
                            Id = "SJ",
                            InEuropeanUnion = false,
                            Name = "SVALBARD AND JAN MAYEN"
                        },
                        new
                        {
                            Id = "SZ",
                            InEuropeanUnion = false,
                            Name = "SWAZILAND"
                        },
                        new
                        {
                            Id = "SE",
                            InEuropeanUnion = true,
                            Name = "SWEDEN"
                        },
                        new
                        {
                            Id = "CH",
                            InEuropeanUnion = false,
                            Name = "SWITZERLAND"
                        },
                        new
                        {
                            Id = "SY",
                            InEuropeanUnion = false,
                            Name = "SYRIAN ARAB REPUBLIC"
                        },
                        new
                        {
                            Id = "TW",
                            InEuropeanUnion = false,
                            Name = "TAIWAN, PROVINCE OF CHINA"
                        },
                        new
                        {
                            Id = "TJ",
                            InEuropeanUnion = false,
                            Name = "TAJIKISTAN"
                        },
                        new
                        {
                            Id = "TZ",
                            InEuropeanUnion = false,
                            Name = "TANZANIA, UNITED REPUBLIC OF"
                        },
                        new
                        {
                            Id = "TH",
                            InEuropeanUnion = false,
                            Name = "THAILAND"
                        },
                        new
                        {
                            Id = "TL",
                            InEuropeanUnion = false,
                            Name = "TIMOR-LESTE"
                        },
                        new
                        {
                            Id = "TG",
                            InEuropeanUnion = false,
                            Name = "TOGO"
                        },
                        new
                        {
                            Id = "TK",
                            InEuropeanUnion = false,
                            Name = "TOKELAU"
                        },
                        new
                        {
                            Id = "TO",
                            InEuropeanUnion = false,
                            Name = "TONGA"
                        },
                        new
                        {
                            Id = "TT",
                            InEuropeanUnion = false,
                            Name = "TRINIDAD AND TOBAGO"
                        },
                        new
                        {
                            Id = "TN",
                            InEuropeanUnion = false,
                            Name = "TUNISIA"
                        },
                        new
                        {
                            Id = "TR",
                            InEuropeanUnion = false,
                            Name = "TURKEY"
                        },
                        new
                        {
                            Id = "TM",
                            InEuropeanUnion = false,
                            Name = "TURKMENISTAN"
                        },
                        new
                        {
                            Id = "TC",
                            InEuropeanUnion = false,
                            Name = "TURKS AND CAICOS ISLANDS"
                        },
                        new
                        {
                            Id = "TV",
                            InEuropeanUnion = false,
                            Name = "TUVALU"
                        },
                        new
                        {
                            Id = "UG",
                            InEuropeanUnion = false,
                            Name = "UGANDA"
                        },
                        new
                        {
                            Id = "UA",
                            InEuropeanUnion = false,
                            Name = "UKRAINE"
                        },
                        new
                        {
                            Id = "AE",
                            InEuropeanUnion = false,
                            Name = "UNITED ARAB EMIRATES"
                        },
                        new
                        {
                            Id = "GB",
                            InEuropeanUnion = false,
                            Name = "UNITED KINGDOM"
                        },
                        new
                        {
                            Id = "US",
                            InEuropeanUnion = false,
                            Name = "UNITED STATES"
                        },
                        new
                        {
                            Id = "UM",
                            InEuropeanUnion = false,
                            Name = "UNITED STATES MINOR OUTLYING ISLANDS"
                        },
                        new
                        {
                            Id = "UY",
                            InEuropeanUnion = false,
                            Name = "URUGUAY"
                        },
                        new
                        {
                            Id = "UZ",
                            InEuropeanUnion = false,
                            Name = "UZBEKISTAN"
                        },
                        new
                        {
                            Id = "VU",
                            InEuropeanUnion = false,
                            Name = "VANUATU"
                        },
                        new
                        {
                            Id = "VE",
                            InEuropeanUnion = false,
                            Name = "VENEZUELA"
                        },
                        new
                        {
                            Id = "VN",
                            InEuropeanUnion = false,
                            Name = "VIET NAM"
                        },
                        new
                        {
                            Id = "VG",
                            InEuropeanUnion = false,
                            Name = "VIRGIN ISLANDS, BRITISH"
                        },
                        new
                        {
                            Id = "VI",
                            InEuropeanUnion = false,
                            Name = "VIRGIN ISLANDS, U.S."
                        },
                        new
                        {
                            Id = "WF",
                            InEuropeanUnion = false,
                            Name = "WALLIS AND FUTUNA"
                        },
                        new
                        {
                            Id = "EH",
                            InEuropeanUnion = false,
                            Name = "WESTERN SAHARA"
                        },
                        new
                        {
                            Id = "YE",
                            InEuropeanUnion = false,
                            Name = "YEMEN"
                        },
                        new
                        {
                            Id = "ZM",
                            InEuropeanUnion = false,
                            Name = "ZAMBIA"
                        },
                        new
                        {
                            Id = "ZW",
                            InEuropeanUnion = false,
                            Name = "ZIMBABWE"
                        },
                        new
                        {
                            Id = "RS",
                            InEuropeanUnion = false,
                            Name = "REPUBLIC OF SERBIA"
                        });
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Currency", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currencies", "Masterdata");

                    b.HasData(
                        new
                        {
                            Id = "AED",
                            Name = "UAEDirham"
                        },
                        new
                        {
                            Id = "AFN",
                            Name = "Afghani"
                        },
                        new
                        {
                            Id = "ALL",
                            Name = "Lek"
                        },
                        new
                        {
                            Id = "AMD",
                            Name = "ArmenianDram"
                        },
                        new
                        {
                            Id = "ANG",
                            Name = "NetherlandsAntillianGuilder"
                        },
                        new
                        {
                            Id = "AOA",
                            Name = "Kwanza"
                        },
                        new
                        {
                            Id = "ARS",
                            Name = "ArgentinePeso"
                        },
                        new
                        {
                            Id = "AUD",
                            Name = "AustralianDollar"
                        },
                        new
                        {
                            Id = "AWG",
                            Name = "ArubanGuilder"
                        },
                        new
                        {
                            Id = "AZN",
                            Name = "AzerbaijanianManat"
                        },
                        new
                        {
                            Id = "BAM",
                            Name = "ConvertibleMarks"
                        },
                        new
                        {
                            Id = "BBD",
                            Name = "BarbadosDollar"
                        },
                        new
                        {
                            Id = "BDT",
                            Name = "Taka"
                        },
                        new
                        {
                            Id = "BGN",
                            Name = "BulgarianLev"
                        },
                        new
                        {
                            Id = "BHD",
                            Name = "BahrainiDinar"
                        },
                        new
                        {
                            Id = "BIF",
                            Name = "BurundiFranc"
                        },
                        new
                        {
                            Id = "BMD",
                            Name = "BermudianDollar"
                        },
                        new
                        {
                            Id = "BND",
                            Name = "BruneiDollar"
                        },
                        new
                        {
                            Id = "BOB",
                            Name = "Boliviano"
                        },
                        new
                        {
                            Id = "BRL",
                            Name = "BrazilianReal"
                        },
                        new
                        {
                            Id = "BSD",
                            Name = "BahamianDollar"
                        },
                        new
                        {
                            Id = "BWP",
                            Name = "Pula"
                        },
                        new
                        {
                            Id = "BYR",
                            Name = "BelarussianRuble"
                        },
                        new
                        {
                            Id = "BZD",
                            Name = "BelizeDollar"
                        },
                        new
                        {
                            Id = "CAD",
                            Name = "CanadianDollar"
                        },
                        new
                        {
                            Id = "CDF",
                            Name = "FrancCongolais"
                        },
                        new
                        {
                            Id = "CHE",
                            Name = "WIREuro"
                        },
                        new
                        {
                            Id = "CHF",
                            Name = "SwissFranc"
                        },
                        new
                        {
                            Id = "CHW",
                            Name = "WIRFranc"
                        },
                        new
                        {
                            Id = "CLP",
                            Name = "ChileanPeso"
                        },
                        new
                        {
                            Id = "CNY",
                            Name = "YuanRenminbi"
                        },
                        new
                        {
                            Id = "COP",
                            Name = "ColombianPeso"
                        },
                        new
                        {
                            Id = "CRC",
                            Name = "CostaRicanColon"
                        },
                        new
                        {
                            Id = "CUP",
                            Name = "CubanPeso"
                        },
                        new
                        {
                            Id = "CVE",
                            Name = "CapeVerdeEscudo"
                        },
                        new
                        {
                            Id = "CYP",
                            Name = "CyprusPound"
                        },
                        new
                        {
                            Id = "CZK",
                            Name = "CzechKoruna"
                        },
                        new
                        {
                            Id = "DJF",
                            Name = "DjiboutiFranc"
                        },
                        new
                        {
                            Id = "DKK",
                            Name = "DanishKrone"
                        },
                        new
                        {
                            Id = "DOP",
                            Name = "DominicanPeso"
                        },
                        new
                        {
                            Id = "DZD",
                            Name = "AlgerianDinar"
                        },
                        new
                        {
                            Id = "EEK",
                            Name = "Kroon"
                        },
                        new
                        {
                            Id = "EGP",
                            Name = "EgyptianPound"
                        },
                        new
                        {
                            Id = "ERN",
                            Name = "Nakfa"
                        },
                        new
                        {
                            Id = "ETB",
                            Name = "EthiopianBirr"
                        },
                        new
                        {
                            Id = "EUR",
                            Name = "Euro"
                        },
                        new
                        {
                            Id = "FJD",
                            Name = "FijiDollar"
                        },
                        new
                        {
                            Id = "FKP",
                            Name = "FalklandIslandsPound"
                        },
                        new
                        {
                            Id = "GBP",
                            Name = "PoundSterling"
                        },
                        new
                        {
                            Id = "GEL",
                            Name = "Lari"
                        },
                        new
                        {
                            Id = "GHC",
                            Name = "Cedi"
                        },
                        new
                        {
                            Id = "GIP",
                            Name = "GibraltarPound"
                        },
                        new
                        {
                            Id = "GMD",
                            Name = "Dalasi"
                        },
                        new
                        {
                            Id = "GNF",
                            Name = "GuineaFranc"
                        },
                        new
                        {
                            Id = "GTQ",
                            Name = "Quetzal"
                        },
                        new
                        {
                            Id = "GWP",
                            Name = "Guinea-BissauPeso"
                        },
                        new
                        {
                            Id = "GYD",
                            Name = "GuyanaDollar"
                        },
                        new
                        {
                            Id = "HKD",
                            Name = "HongKongDollar"
                        },
                        new
                        {
                            Id = "HNL",
                            Name = "Lempira"
                        },
                        new
                        {
                            Id = "HRK",
                            Name = "CroatianKuna"
                        },
                        new
                        {
                            Id = "HTG",
                            Name = "Gourde"
                        },
                        new
                        {
                            Id = "HUF",
                            Name = "Forint"
                        },
                        new
                        {
                            Id = "IDR",
                            Name = "Rupiah"
                        },
                        new
                        {
                            Id = "ILS",
                            Name = "NewIsraeliSheqel"
                        },
                        new
                        {
                            Id = "INR",
                            Name = "IndianRupee"
                        },
                        new
                        {
                            Id = "IQD",
                            Name = "IraqiDinar"
                        },
                        new
                        {
                            Id = "IRR",
                            Name = "IranianRial"
                        },
                        new
                        {
                            Id = "ISK",
                            Name = "IcelandKrona"
                        },
                        new
                        {
                            Id = "JMD",
                            Name = "JamaicanDollar"
                        },
                        new
                        {
                            Id = "JOD",
                            Name = "JordanianDinar"
                        },
                        new
                        {
                            Id = "JPY",
                            Name = "Yen"
                        },
                        new
                        {
                            Id = "KES",
                            Name = "KenyanShilling"
                        },
                        new
                        {
                            Id = "KGS",
                            Name = "Som"
                        },
                        new
                        {
                            Id = "KHR",
                            Name = "Riel"
                        },
                        new
                        {
                            Id = "KMF",
                            Name = "ComoroFranc"
                        },
                        new
                        {
                            Id = "KPW",
                            Name = "NorthKoreanWon"
                        },
                        new
                        {
                            Id = "KRW",
                            Name = "Won"
                        },
                        new
                        {
                            Id = "KWD",
                            Name = "KuwaitiDinar"
                        },
                        new
                        {
                            Id = "KYD",
                            Name = "CaymanIslandsDollar"
                        },
                        new
                        {
                            Id = "KZT",
                            Name = "Tenge"
                        },
                        new
                        {
                            Id = "LAK",
                            Name = "Kip"
                        },
                        new
                        {
                            Id = "LBP",
                            Name = "LebanesePound"
                        },
                        new
                        {
                            Id = "LKR",
                            Name = "SriLankaRupee"
                        },
                        new
                        {
                            Id = "LRD",
                            Name = "LiberianDollar"
                        },
                        new
                        {
                            Id = "LSL",
                            Name = "Loti"
                        },
                        new
                        {
                            Id = "LTL",
                            Name = "LithuanianLitas"
                        },
                        new
                        {
                            Id = "LVL",
                            Name = "LatvianLats"
                        },
                        new
                        {
                            Id = "LYD",
                            Name = "LibyanDinar"
                        },
                        new
                        {
                            Id = "MAD",
                            Name = "MoroccanDirham"
                        },
                        new
                        {
                            Id = "MDL",
                            Name = "MoldovanLeu"
                        },
                        new
                        {
                            Id = "MGA",
                            Name = "MalagascyAriary"
                        },
                        new
                        {
                            Id = "MGF",
                            Name = "MalagascyFranc"
                        },
                        new
                        {
                            Id = "MKD",
                            Name = "Denar"
                        },
                        new
                        {
                            Id = "MMK",
                            Name = "Kyat"
                        },
                        new
                        {
                            Id = "MNT",
                            Name = "Tugrik"
                        },
                        new
                        {
                            Id = "MOP",
                            Name = "Pataca"
                        },
                        new
                        {
                            Id = "MRO",
                            Name = "Ouguiya"
                        },
                        new
                        {
                            Id = "MTL",
                            Name = "MalteseLira"
                        },
                        new
                        {
                            Id = "MUR",
                            Name = "MauritiusRupee"
                        },
                        new
                        {
                            Id = "MVR",
                            Name = "Rufiyaa"
                        },
                        new
                        {
                            Id = "MWK",
                            Name = "Kwacha"
                        },
                        new
                        {
                            Id = "MXN",
                            Name = "MexicanPeso"
                        },
                        new
                        {
                            Id = "MYR",
                            Name = "MalaysianRinggit"
                        },
                        new
                        {
                            Id = "MZN",
                            Name = "Metical"
                        },
                        new
                        {
                            Id = "NAD",
                            Name = "NamibianDollar"
                        },
                        new
                        {
                            Id = "NGN",
                            Name = "Naira"
                        },
                        new
                        {
                            Id = "NIO",
                            Name = "CordobaOro"
                        },
                        new
                        {
                            Id = "NOK",
                            Name = "NorwegianKrone"
                        },
                        new
                        {
                            Id = "NPR",
                            Name = "NepaleseRupee"
                        },
                        new
                        {
                            Id = "NZD",
                            Name = "NewZealandDollar"
                        },
                        new
                        {
                            Id = "OMR",
                            Name = "RialOmani"
                        },
                        new
                        {
                            Id = "PAB",
                            Name = "Balboa"
                        },
                        new
                        {
                            Id = "PEN",
                            Name = "NuevoSol"
                        },
                        new
                        {
                            Id = "PGK",
                            Name = "Kina"
                        },
                        new
                        {
                            Id = "PHP",
                            Name = "PhilippinePeso"
                        },
                        new
                        {
                            Id = "PKR",
                            Name = "PakistanRupee"
                        },
                        new
                        {
                            Id = "PLN",
                            Name = "Zloty"
                        },
                        new
                        {
                            Id = "PYG",
                            Name = "Guarani"
                        },
                        new
                        {
                            Id = "QAR",
                            Name = "QatariRial"
                        },
                        new
                        {
                            Id = "ROL",
                            Name = "OldLeu"
                        },
                        new
                        {
                            Id = "RON",
                            Name = "NewLeu"
                        },
                        new
                        {
                            Id = "RSD",
                            Name = "SerbianDinar"
                        },
                        new
                        {
                            Id = "RUB",
                            Name = "RussianRuble"
                        },
                        new
                        {
                            Id = "RWF",
                            Name = "RwandaFranc"
                        },
                        new
                        {
                            Id = "SAR",
                            Name = "SaudiRiyal"
                        },
                        new
                        {
                            Id = "SBD",
                            Name = "SolomonIslandsDollar"
                        },
                        new
                        {
                            Id = "SCR",
                            Name = "SeychellesRupee"
                        },
                        new
                        {
                            Id = "SDD",
                            Name = "SudaneseDinar"
                        },
                        new
                        {
                            Id = "SEK",
                            Name = "SwedishKrona"
                        },
                        new
                        {
                            Id = "SGD",
                            Name = "SingaporeDollar"
                        },
                        new
                        {
                            Id = "SHP",
                            Name = "SaintHelenaPound"
                        },
                        new
                        {
                            Id = "SIT",
                            Name = "Tolar"
                        },
                        new
                        {
                            Id = "SKK",
                            Name = "SlovakKoruna"
                        },
                        new
                        {
                            Id = "SLL",
                            Name = "Leone"
                        },
                        new
                        {
                            Id = "SOS",
                            Name = "SomaliShilling"
                        },
                        new
                        {
                            Id = "SRD",
                            Name = "SurinamDollar"
                        },
                        new
                        {
                            Id = "STD",
                            Name = "Dobra"
                        },
                        new
                        {
                            Id = "SVC",
                            Name = "ElSalvadorColon"
                        },
                        new
                        {
                            Id = "SYP",
                            Name = "SyrianPound"
                        },
                        new
                        {
                            Id = "SZL",
                            Name = "Lilangeni"
                        },
                        new
                        {
                            Id = "THB",
                            Name = "Baht"
                        },
                        new
                        {
                            Id = "TJS",
                            Name = "Somoni"
                        },
                        new
                        {
                            Id = "TMM",
                            Name = "Manat"
                        },
                        new
                        {
                            Id = "TND",
                            Name = "TunisianDinar"
                        },
                        new
                        {
                            Id = "TOP",
                            Name = "Pa'anga"
                        },
                        new
                        {
                            Id = "TRY",
                            Name = "NewTurkishLira"
                        },
                        new
                        {
                            Id = "TTD",
                            Name = "TrinidadandTobagoDollar"
                        },
                        new
                        {
                            Id = "TWD",
                            Name = "NewTaiwanDollar"
                        },
                        new
                        {
                            Id = "TZS",
                            Name = "TanzanianShilling"
                        },
                        new
                        {
                            Id = "UAH",
                            Name = "Hryvnia"
                        },
                        new
                        {
                            Id = "UGX",
                            Name = "UgandaShilling"
                        },
                        new
                        {
                            Id = "USD",
                            Name = "USDollar"
                        },
                        new
                        {
                            Id = "USN",
                            Name = "(Nextday)"
                        },
                        new
                        {
                            Id = "USS",
                            Name = "(Sameday)"
                        },
                        new
                        {
                            Id = "UYU",
                            Name = "PesoUruguayo"
                        },
                        new
                        {
                            Id = "UZS",
                            Name = "UzbekistanSum"
                        },
                        new
                        {
                            Id = "VEB",
                            Name = "Bolivar"
                        },
                        new
                        {
                            Id = "VND",
                            Name = "Dong"
                        },
                        new
                        {
                            Id = "VUV",
                            Name = "Vatu"
                        },
                        new
                        {
                            Id = "WST",
                            Name = "Tala"
                        },
                        new
                        {
                            Id = "XAF",
                            Name = "CFAFrancBEAC"
                        },
                        new
                        {
                            Id = "XCD",
                            Name = "EastCaribbeanDollar"
                        },
                        new
                        {
                            Id = "XDR",
                            Name = "SDR"
                        },
                        new
                        {
                            Id = "XOF",
                            Name = "CFAFrancBCEAO"
                        },
                        new
                        {
                            Id = "XPF",
                            Name = "CFPFranc"
                        },
                        new
                        {
                            Id = "YER",
                            Name = "YemeniRial"
                        },
                        new
                        {
                            Id = "ZAR",
                            Name = "Rand"
                        },
                        new
                        {
                            Id = "ZMK",
                            Name = "Kwacha"
                        },
                        new
                        {
                            Id = "ZWD",
                            Name = "ZimbabweDollar"
                        });
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.System", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Systems", "Masterdata");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdvice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("B2BUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CaptureDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreditorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreditorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DebtorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DebtorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("DebtorPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Effective")
                        .HasColumnType("datetime2");

                    b.Property<string>("FunderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunderState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RemittanceAdviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SourceSystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("B2BUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("RemittanceAdviceTypeId");

                    b.HasIndex("SourceSystemId");

                    b.ToTable("RemittanceAdvices", "Payments");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdviceCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("CompanyReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Perspective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RemittanceAdviceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyReferenceId");

                    b.HasIndex("RemittanceAdviceId");

                    b.ToTable("RemittanceAdviceCompanies", "Payments");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdviceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditReferenceId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CreditorAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("DebtorAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InvoiceReferenceId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("LinePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfferReferenceId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PurchaseOrderReferenceId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RemittanceAdviceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreditReferenceId");

                    b.HasIndex("CreditorAccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DebtorAccountId");

                    b.HasIndex("InvoiceReferenceId");

                    b.HasIndex("OfferId");

                    b.HasIndex("OfferReferenceId");

                    b.HasIndex("PurchaseOrderReferenceId");

                    b.HasIndex("RemittanceAdviceId");

                    b.ToTable("RemittanceAdviceLines", "Payments");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdviceReference", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RemittanceAdviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceAdviceId");

                    b.HasIndex("SystemId");

                    b.ToTable("RemittanceAdviceReferences", "Payments");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("RemittanceAdviceTypes", "Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Statement"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Payer Payment Advice"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Payee Payment Advice"
                        });
                });

            modelBuilder.Entity("B2B.Objects.Entities.PurchaseOrderCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("CompanyReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Perspective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyReferenceId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderCompanies", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.PurchaseOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("LinePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderLines", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.PurchaseOrderReference", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SystemId");

                    b.ToTable("PurchaseOrderReferences", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Security.B2BRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Privs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UsersArePortalAdmins")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Security");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Security.B2BUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users", "Security");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Security.B2BUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Security");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.ActiveTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("AgreedDiscountPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CaptureDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("CostOfFunding")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreditorGeneralLedgerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreditorReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreditorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreditorVATReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DebtorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DebtorGeneralLedgerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("DebtorPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DebtorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DebtorVATReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("FundableValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FunderExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FunderReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FundingState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("OfferAcceptanceDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("OfferExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("OfferRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("OfferValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("ProposedDiscountPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RelatedTransactionReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SourceSystemId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("TaxPoint")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnpaidValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueOfTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceSystemId");

                    b.HasIndex("SourceSystemId", "CurrencyId", "DebtorState", "Value");

                    b.ToTable("ActiveTransactions", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AgreedDiscountPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CaptureDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreditTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreditorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreditorGeneralLedgerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreditorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DebtorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DebtorGeneralLedgerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("DebtorPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FunderExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FunderName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FundingState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoiceReferenceId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SourceSystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("TaxPoint")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueOfTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreditTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceReferenceId");

                    b.HasIndex("SourceSystemId");

                    b.ToTable("Credits", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.CreditType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("CreditTypes", "Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Credit Note"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Replacement"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Debit Note"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Self Billing Credit"
                        });
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AgreedDiscountPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CaptureDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreditorGeneralLedgerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreditorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DebtorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DebtorGeneralLedgerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("DebtorPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FunderExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FunderName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FundingState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SourceSystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("TaxPoint")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueOfTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("SourceSystemId");

                    b.ToTable("Invoices", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.InvoiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceTypes", "Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sales Invoice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Copy Invoice"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Replacement"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Self Billing Invoice"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pro Forma Inv"
                        });
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CaptureDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreditorGeneralLedgerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreditorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreditorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DebtorExternalState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DebtorGeneralLedgerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("DebtorPaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DebtorState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SourceSystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("TaxPoint")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValueOfTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceSystemId");

                    b.ToTable("PurchaseOrders", "Transactions");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.Bank", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Address", "Address")
                        .WithMany("Banks")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.BankAccount", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Banking.BankBranch", "BankBranch")
                        .WithMany("Accounts")
                        .HasForeignKey("BankBranchId");

                    b.Navigation("BankBranch");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.BankBranch", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Address", "Address")
                        .WithMany("BankBranches")
                        .HasForeignKey("AddressId");

                    b.HasOne("B2B.Objects.Entities.Banking.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.Payee", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Address", "Address")
                        .WithMany("Payees")
                        .HasForeignKey("AddressId");

                    b.HasOne("B2B.Objects.Entities.Banking.BankAccount", "BankAccount")
                        .WithMany("Payees")
                        .HasForeignKey("BankAccountId");

                    b.Navigation("Address");

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("B2B.Objects.Entities.CreditCompany", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.CompanyReference", "CompanyReference")
                        .WithMany("CreditReferences")
                        .HasForeignKey("CompanyReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.Credit", "Credit")
                        .WithMany("Companies")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyReference");

                    b.Navigation("Credit");
                });

            modelBuilder.Entity("B2B.Objects.Entities.CreditLine", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Transactions.Credit", "Credit")
                        .WithMany("Lines")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("CreditLines")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Credit");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("B2B.Objects.Entities.CreditReference", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Transactions.Credit", "Credit")
                        .WithMany("References")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "System")
                        .WithMany("CreditReferences")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Credit");

                    b.Navigation("System");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.FundingDetail", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("FundingDetails")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "FundingTypeBucket")
                        .WithMany("FundingDetails")
                        .HasForeignKey("FundingTypeBucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "System")
                        .WithMany("FundingDetails")
                        .HasForeignKey("SystemId");

                    b.Navigation("Currency");

                    b.Navigation("FundingTypeBucket");

                    b.Navigation("System");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.Offer", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("Offers")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "SourceSystem")
                        .WithMany("Offers")
                        .HasForeignKey("SourceSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("SourceSystem");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferCompany", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.CompanyReference", "CompanyReference")
                        .WithMany("OfferReferences")
                        .HasForeignKey("CompanyReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Funding.Offer.Offer", "Offer")
                        .WithMany("Companies")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyReference");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferDataItem", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Funding.Offer.Offer", "Offer")
                        .WithMany("Data")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferLine", b =>
                {
                    b.HasOne("B2B.Objects.Entities.CreditReference", "CreditReference")
                        .WithMany("OfferLines")
                        .HasForeignKey("CreditReferenceId");

                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("OfferLines")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.InvoiceReference", "InvoiceReference")
                        .WithMany("OfferLines")
                        .HasForeignKey("InvoiceReferenceId");

                    b.HasOne("B2B.Objects.Entities.Funding.Offer.Offer", "Offer")
                        .WithMany("Lines")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditReference");

                    b.Navigation("Currency");

                    b.Navigation("InvoiceReference");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferReference", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Funding.Offer.Offer", "Offer")
                        .WithMany("References")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "System")
                        .WithMany("OfferReferences")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("System");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Import.CompanyCSVLine", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "RootBucket")
                        .WithMany("CompanyCSVLines")
                        .HasForeignKey("RootBucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RootBucket");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Import.TransactionCSVLine", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "RootBucket")
                        .WithMany("TransactionCSVLines")
                        .HasForeignKey("RootBucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RootBucket");
                });

            modelBuilder.Entity("B2B.Objects.Entities.InvoiceCompany", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.CompanyReference", "CompanyReference")
                        .WithMany("InvoiceReferences")
                        .HasForeignKey("CompanyReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.Invoice", "Invoice")
                        .WithMany("Companies")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyReference");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("B2B.Objects.Entities.InvoiceLine", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.Invoice", "Invoice")
                        .WithMany("Lines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("B2B.Objects.Entities.InvoiceReference", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Transactions.Invoice", "Invoice")
                        .WithMany("References")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "System")
                        .WithMany("InvoiceReferences")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("System");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.CreditAuditItem", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Logging.AuditItemLevel", "AuditItemLevel")
                        .WithMany("CreditAuditItems")
                        .HasForeignKey("AuditItemLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.Credit", "Credit")
                        .WithMany("AuditTrail")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Security.B2BUser", "User")
                        .WithMany("CreditAuditItems")
                        .HasForeignKey("UserId");

                    b.Navigation("AuditItemLevel");

                    b.Navigation("Credit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.InvoiceAuditItem", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Logging.AuditItemLevel", "AuditItemLevel")
                        .WithMany("InvoiceAuditItems")
                        .HasForeignKey("AuditItemLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.Invoice", "Invoice")
                        .WithMany("AuditTrail")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Security.B2BUser", "User")
                        .WithMany("InvoiceAuditItems")
                        .HasForeignKey("UserId");

                    b.Navigation("AuditItemLevel");

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.OfferAuditItem", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Logging.AuditItemLevel", "AuditItemLevel")
                        .WithMany("OfferAuditItems")
                        .HasForeignKey("AuditItemLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Funding.Offer.Offer", "Offer")
                        .WithMany("AuditTrail")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Security.B2BUser", "User")
                        .WithMany("OfferAuditItems")
                        .HasForeignKey("UserId");

                    b.Navigation("AuditItemLevel");

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.PurchaseOrderAuditItem", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Logging.AuditItemLevel", "AuditItemLevel")
                        .WithMany("PurchaseOrderAuditItems")
                        .HasForeignKey("AuditItemLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.PurchaseOrder", "PurchaseOrder")
                        .WithMany("AuditTrail")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Security.B2BUser", "User")
                        .WithMany("PurchaseOrderAuditItems")
                        .HasForeignKey("UserId");

                    b.Navigation("AuditItemLevel");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.RemittanceAdviceAuditItem", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Logging.AuditItemLevel", "AuditItemLevel")
                        .WithMany("RemittanceAdviceAuditItems")
                        .HasForeignKey("AuditItemLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Payments.RemittanceAdvice", "RemittanceAdvice")
                        .WithMany("AuditTrail")
                        .HasForeignKey("RemittanceAdviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Security.B2BUser", "User")
                        .WithMany("RemittanceAdviceAuditItems")
                        .HasForeignKey("UserId");

                    b.Navigation("AuditItemLevel");

                    b.Navigation("RemittanceAdvice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Address", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Bucket", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Parent")
                        .WithMany("Buckets")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketActiveTransaction", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Transactions.ActiveTransaction", "ActiveTransaction")
                        .WithMany("Buckets")
                        .HasForeignKey("ActiveTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("ActiveTransactions")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActiveTransaction");

                    b.Navigation("Bucket");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketBankAccount", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Banking.BankAccount", "BankAccount")
                        .WithMany("Buckets")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Bucket");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketCompany", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("Companies")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.Company", "Company")
                        .WithMany("Buckets")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketCredit", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("Credits")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.Credit", "Credit")
                        .WithMany("Buckets")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("Credit");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketInvoice", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("Invoices")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.Invoice", "Invoice")
                        .WithMany("Buckets")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketOffer", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("Offers")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Funding.Offer.Offer", "Offer")
                        .WithMany("Buckets")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketPayee", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("Payees")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Banking.Payee", "Payee")
                        .WithMany("Buckets")
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("Payee");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketPurchaseOrder", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Buckets")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketRemittanceAdvice", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("RemittanceAdvices")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Payments.RemittanceAdvice", "RemittanceAdvice")
                        .WithMany("Buckets")
                        .HasForeignKey("RemittanceAdviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("RemittanceAdvice");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketRole", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("Roles")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Security.B2BRole", "Role")
                        .WithMany("Buckets")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketSystem", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("Systems")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "System")
                        .WithMany("Buckets")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("System");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.BucketUser", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Bucket", "Bucket")
                        .WithMany("Users")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Security.B2BUser", "User")
                        .WithMany("Buckets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Company", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Address", "Address")
                        .WithMany("Companies")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.CompanyPayee", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Company", "Company")
                        .WithMany("Payees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Banking.Payee", "Payee")
                        .WithMany("Companies")
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Payee");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.CompanyReference", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Company", "Company")
                        .WithMany("References")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "System")
                        .WithMany("CompanyReferences")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("System");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdvice", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Security.B2BUser", "B2BUser")
                        .WithMany("RAHeads")
                        .HasForeignKey("B2BUserId");

                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("RemittenceAdvices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Payments.RemittanceAdviceType", "RemittanceAdviceType")
                        .WithMany("RemittanceAdvices")
                        .HasForeignKey("RemittanceAdviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "SourceSystem")
                        .WithMany("RemittanceAdvices")
                        .HasForeignKey("SourceSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("B2BUser");

                    b.Navigation("Currency");

                    b.Navigation("RemittanceAdviceType");

                    b.Navigation("SourceSystem");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdviceCompany", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.CompanyReference", "CompanyReference")
                        .WithMany("RemittanceAdviceReferences")
                        .HasForeignKey("CompanyReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Payments.RemittanceAdvice", "RemittanceAdvice")
                        .WithMany("Companies")
                        .HasForeignKey("RemittanceAdviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyReference");

                    b.Navigation("RemittanceAdvice");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdviceLine", b =>
                {
                    b.HasOne("B2B.Objects.Entities.CreditReference", "CreditReference")
                        .WithMany("RemittanceAdviceLines")
                        .HasForeignKey("CreditReferenceId");

                    b.HasOne("B2B.Objects.Entities.Banking.BankAccount", "CreditorAccount")
                        .WithMany("CreditorPayments")
                        .HasForeignKey("CreditorAccountId");

                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("RemittanceAdviceLines")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Banking.BankAccount", "DebtorAccount")
                        .WithMany("DebtorPayments")
                        .HasForeignKey("DebtorAccountId");

                    b.HasOne("B2B.Objects.Entities.InvoiceReference", "InvoiceReference")
                        .WithMany("RemittanceAdviceLines")
                        .HasForeignKey("InvoiceReferenceId");

                    b.HasOne("B2B.Objects.Entities.Funding.Offer.Offer", "Offer")
                        .WithMany("RemittanceAdviceLines")
                        .HasForeignKey("OfferId");

                    b.HasOne("B2B.Objects.Entities.Funding.Offer.OfferReference", "OfferReference")
                        .WithMany("RemittanceAdviceLines")
                        .HasForeignKey("OfferReferenceId");

                    b.HasOne("B2B.Objects.Entities.PurchaseOrderReference", "PurchaseOrderReference")
                        .WithMany("RemittanceAdviceLines")
                        .HasForeignKey("PurchaseOrderReferenceId");

                    b.HasOne("B2B.Objects.Entities.Payments.RemittanceAdvice", "RemittanceAdvice")
                        .WithMany("Lines")
                        .HasForeignKey("RemittanceAdviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditReference");

                    b.Navigation("CreditorAccount");

                    b.Navigation("Currency");

                    b.Navigation("DebtorAccount");

                    b.Navigation("InvoiceReference");

                    b.Navigation("Offer");

                    b.Navigation("OfferReference");

                    b.Navigation("PurchaseOrderReference");

                    b.Navigation("RemittanceAdvice");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdviceReference", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Payments.RemittanceAdvice", "RemittanceAdvice")
                        .WithMany("References")
                        .HasForeignKey("RemittanceAdviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "System")
                        .WithMany("RemittanceAdviceReferences")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RemittanceAdvice");

                    b.Navigation("System");
                });

            modelBuilder.Entity("B2B.Objects.Entities.PurchaseOrderCompany", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.CompanyReference", "CompanyReference")
                        .WithMany("PurchaseOrderReferences")
                        .HasForeignKey("CompanyReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Companies")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyReference");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("B2B.Objects.Entities.PurchaseOrderLine", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Lines")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("B2B.Objects.Entities.PurchaseOrderReference", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Transactions.PurchaseOrder", "PurchaseOrder")
                        .WithMany("References")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "System")
                        .WithMany("PurchaseOrderReferences")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("System");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Security.B2BUser", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Security.B2BUserRole", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Security.B2BRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Security.B2BUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.ActiveTransaction", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("ActiveTransactions")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "SourceSystem")
                        .WithMany("ActiveTransactions")
                        .HasForeignKey("SourceSystemId");

                    b.Navigation("Currency");

                    b.Navigation("SourceSystem");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.Credit", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Transactions.CreditType", "CreditType")
                        .WithMany("Credits")
                        .HasForeignKey("CreditTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("Credits")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.InvoiceReference", "InvoiceReference")
                        .WithMany("Credits")
                        .HasForeignKey("InvoiceReferenceId");

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "SourceSystem")
                        .WithMany("Credits")
                        .HasForeignKey("SourceSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditType");

                    b.Navigation("Currency");

                    b.Navigation("InvoiceReference");

                    b.Navigation("SourceSystem");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.Invoice", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("Invoices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Transactions.InvoiceType", "InvoiceType")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "SourceSystem")
                        .WithMany("Invoices")
                        .HasForeignKey("SourceSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("InvoiceType");

                    b.Navigation("SourceSystem");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.PurchaseOrder", b =>
                {
                    b.HasOne("B2B.Objects.Entities.Masterdata.Currency", "Currency")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B2B.Objects.Entities.Masterdata.System", "SourceSystem")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SourceSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("SourceSystem");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.Bank", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.BankAccount", b =>
                {
                    b.Navigation("Buckets");

                    b.Navigation("CreditorPayments");

                    b.Navigation("DebtorPayments");

                    b.Navigation("Payees");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.BankBranch", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Banking.Payee", b =>
                {
                    b.Navigation("Buckets");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("B2B.Objects.Entities.CreditReference", b =>
                {
                    b.Navigation("OfferLines");

                    b.Navigation("RemittanceAdviceLines");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.Offer", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Buckets");

                    b.Navigation("Companies");

                    b.Navigation("Data");

                    b.Navigation("Lines");

                    b.Navigation("References");

                    b.Navigation("RemittanceAdviceLines");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Funding.Offer.OfferReference", b =>
                {
                    b.Navigation("RemittanceAdviceLines");
                });

            modelBuilder.Entity("B2B.Objects.Entities.InvoiceReference", b =>
                {
                    b.Navigation("Credits");

                    b.Navigation("OfferLines");

                    b.Navigation("RemittanceAdviceLines");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Logging.AuditItemLevel", b =>
                {
                    b.Navigation("CreditAuditItems");

                    b.Navigation("InvoiceAuditItems");

                    b.Navigation("OfferAuditItems");

                    b.Navigation("PurchaseOrderAuditItems");

                    b.Navigation("RemittanceAdviceAuditItems");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Address", b =>
                {
                    b.Navigation("BankBranches");

                    b.Navigation("Banks");

                    b.Navigation("Companies");

                    b.Navigation("Payees");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Bucket", b =>
                {
                    b.Navigation("ActiveTransactions");

                    b.Navigation("BankAccounts");

                    b.Navigation("Buckets");

                    b.Navigation("Companies");

                    b.Navigation("CompanyCSVLines");

                    b.Navigation("Credits");

                    b.Navigation("FundingDetails");

                    b.Navigation("Invoices");

                    b.Navigation("Offers");

                    b.Navigation("Payees");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("RemittanceAdvices");

                    b.Navigation("Roles");

                    b.Navigation("Systems");

                    b.Navigation("TransactionCSVLines");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Company", b =>
                {
                    b.Navigation("Buckets");

                    b.Navigation("Payees");

                    b.Navigation("References");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.CompanyReference", b =>
                {
                    b.Navigation("CreditReferences");

                    b.Navigation("InvoiceReferences");

                    b.Navigation("OfferReferences");

                    b.Navigation("PurchaseOrderReferences");

                    b.Navigation("RemittanceAdviceReferences");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.Currency", b =>
                {
                    b.Navigation("ActiveTransactions");

                    b.Navigation("CreditLines");

                    b.Navigation("Credits");

                    b.Navigation("FundingDetails");

                    b.Navigation("InvoiceLines");

                    b.Navigation("Invoices");

                    b.Navigation("OfferLines");

                    b.Navigation("Offers");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("RemittanceAdviceLines");

                    b.Navigation("RemittenceAdvices");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Masterdata.System", b =>
                {
                    b.Navigation("ActiveTransactions");

                    b.Navigation("Buckets");

                    b.Navigation("CompanyReferences");

                    b.Navigation("CreditReferences");

                    b.Navigation("Credits");

                    b.Navigation("FundingDetails");

                    b.Navigation("InvoiceReferences");

                    b.Navigation("Invoices");

                    b.Navigation("OfferReferences");

                    b.Navigation("Offers");

                    b.Navigation("PurchaseOrderReferences");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("RemittanceAdviceReferences");

                    b.Navigation("RemittanceAdvices");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdvice", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Buckets");

                    b.Navigation("Companies");

                    b.Navigation("Lines");

                    b.Navigation("References");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Payments.RemittanceAdviceType", b =>
                {
                    b.Navigation("RemittanceAdvices");
                });

            modelBuilder.Entity("B2B.Objects.Entities.PurchaseOrderReference", b =>
                {
                    b.Navigation("RemittanceAdviceLines");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Security.B2BRole", b =>
                {
                    b.Navigation("Buckets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Security.B2BUser", b =>
                {
                    b.Navigation("Buckets");

                    b.Navigation("CreditAuditItems");

                    b.Navigation("InvoiceAuditItems");

                    b.Navigation("OfferAuditItems");

                    b.Navigation("PurchaseOrderAuditItems");

                    b.Navigation("RAHeads");

                    b.Navigation("RemittanceAdviceAuditItems");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.ActiveTransaction", b =>
                {
                    b.Navigation("Buckets");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.Credit", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Buckets");

                    b.Navigation("Companies");

                    b.Navigation("Lines");

                    b.Navigation("References");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.CreditType", b =>
                {
                    b.Navigation("Credits");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.Invoice", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Buckets");

                    b.Navigation("Companies");

                    b.Navigation("Lines");

                    b.Navigation("References");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.InvoiceType", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("B2B.Objects.Entities.Transactions.PurchaseOrder", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Buckets");

                    b.Navigation("Companies");

                    b.Navigation("Lines");

                    b.Navigation("References");
                });
#pragma warning restore 612, 618
        }
    }
}
